// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package dao is a generated GoMock package.
package dao

import (
	model "demo/dfm-test/pkg/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrderDao is a mock of OrderDao interface
type MockOrderDao struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDaoMockRecorder
}

// MockOrderDaoMockRecorder is the mock recorder for MockOrderDao
type MockOrderDaoMockRecorder struct {
	mock *MockOrderDao
}

// NewMockOrderDao creates a new mock instance
func NewMockOrderDao(ctrl *gomock.Controller) *MockOrderDao {
	mock := &MockOrderDao{ctrl: ctrl}
	mock.recorder = &MockOrderDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderDao) EXPECT() *MockOrderDaoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOrderDao) Create(req *model.DemoOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockOrderDaoMockRecorder) Create(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderDao)(nil).Create), req)
}

// UpdateByNo mocks base method
func (m_2 *MockOrderDao) UpdateByNo(orderNo string, m map[string]interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateByNo", orderNo, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByNo indicates an expected call of UpdateByNo
func (mr *MockOrderDaoMockRecorder) UpdateByNo(orderNo, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByNo", reflect.TypeOf((*MockOrderDao)(nil).UpdateByNo), orderNo, m)
}

// QueryByNo mocks base method
func (m *MockOrderDao) QueryByNo(no string) (model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByNo", no)
	ret0, _ := ret[0].(model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByNo indicates an expected call of QueryByNo
func (mr *MockOrderDaoMockRecorder) QueryByNo(no interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByNo", reflect.TypeOf((*MockOrderDao)(nil).QueryByNo), no)
}

// QueryList mocks base method
func (m *MockOrderDao) QueryList(page, size int) ([]*model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryList", page, size)
	ret0, _ := ret[0].([]*model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryList indicates an expected call of QueryList
func (mr *MockOrderDaoMockRecorder) QueryList(page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryList", reflect.TypeOf((*MockOrderDao)(nil).QueryList), page, size)
}

// DeleteByNo mocks base method
func (m *MockOrderDao) DeleteByNo(no string) (model.DemoOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByNo", no)
	ret0, _ := ret[0].(model.DemoOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByNo indicates an expected call of DeleteByNo
func (mr *MockOrderDaoMockRecorder) DeleteByNo(no interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByNo", reflect.TypeOf((*MockOrderDao)(nil).DeleteByNo), no)
}
